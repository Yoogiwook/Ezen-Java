순서, 중복허용
Array 와 List의 차이
Array는 순서대로 저장 가능, 중복저장 허용 데이터가 저장 되어있는 위치(Index)가 중요, 주소를 가지고
바로 찾아갈수 있음
List는 내부적으로는 Index가 있을수 있지만 데이터(엘리먼트)가 저장되어있는 순서가 중요

데이터 추가시
원본 데이터(50 추가)
10(0) 20(1) 30(2) 40(3)
Array
10(0) 20(1) 30(2) 50(3) 		-->40이 사라지고 50이 덮어씌워짐
List
10(0) 20(1) 30(2) 50(3) 40(4)	-->40이 뒤로 밀리고 50이 사이에 들어감

데이터 삭제시
원본 데이터(40 삭제)
10(0) 20(1) 30(2) 40(3) 50(4)
Array
10(0) 20(1) 30(2)   (3) 50(4)	-->(3)번 데이터가 삭제되면서 빈공간이 생김.
List[시퀀스(순서) 라고도 불림] - 순서가 있는 데이터의 모임
10(0) 20(1) 30(2) 50(3)		-->40(3)번 데이터가 삭제되면서 50(4)이 50(3)으로 당겨짐

List의 기능
처음, 끝, 중간에 엘리먼트(데이터)를 추가, 삭제하는 기능
리스트에 데이터가 있는지를 체크하는 기능
리스트의 모든 데이터에 접근할수 있는 기능

언어별 비교
C : 리스트 지원안함(배열은 지원) 다른사람이 만든것을 갖다쓰거나 직접 구현하여 만들어써야함 그래서 더 중요함
JavaScript : 배열의 기능중 .splice();라는 명령어로 삭제(배열이 리스트 이기도하다.)
python : 배열을 기본적으로 지원 안함, 리스트는 지원함 .pop이라는 메서드를 이용하여 리스트의 기능을 사용
	   (리스트가 배열이기도 하다.)
최근의 언어는 리스트를 기본적으로 지원한다.
Java : 배열과 리스트를 각각 독립된 문법으로 지원, 
	배열 int[] numbers = {10,20,30,40,50};
	리스트 ArrayList numbers = new ArrayList();
		numbers.add(10);
		numbers.add(20);
		numbers.add(30);
		numbers.add(40);
		numbers.add(50); 이런식으로 값을 넣어줌
		numbers.remove(3);

Java는 리스트를 두 가지 형태로 지원함
LinkedList numbers = new LinkedList(); (데이터를 추가나 삭제 시 매우 빠름, 인덱스 조회 시 매우 느림)
ArrayList numbers = new ArrayList();	 (데이터를 추가나 삭제 시 매우 느림, 인덱스 조회 시 매우 빠름)

데이터 스트럭쳐는 언어마다 다르다.